require('dotenv').config();
const { insertDocument, findSimilarDocuments, deleteDocument } = require('../dist/tools/index');

async function runDirectTest() {
  console.log('MCP Server Direct Test\n');
  console.log('===================\n');
  
  try {
    // Test 1: Insert documents
    console.log('üìù Test 1: Inserting test documents...\n');
    
    const testDocs = [
      {
        doc_id: 'test1',
        text: 'React „ÅØ„ÄÅ„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÇíÊßãÁØâ„Åô„Çã„Åü„ÇÅ„ÅÆJavaScript„É©„Ç§„Éñ„É©„É™„Åß„Åô„ÄÇ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éô„Éº„Çπ„ÅÆ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Å®‰ªÆÊÉ≥DOM„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÂäπÁéáÁöÑ„Å™UIÊõ¥Êñ∞„ÇíÂÆüÁèæ„Åó„Åæ„Åô„ÄÇ',
        metadata: { category: 'frontend', framework: 'React' }
      },
      {
        doc_id: 'test2', 
        text: 'Vue.js „ÅØ„ÄÅ„Éó„É≠„Ç∞„É¨„ÉÉ„Ç∑„Éñ„Å™JavaScript„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„Åß„Åô„ÄÇ„Ç∑„É≥„Éó„É´„Åï„Å®ÊüîËªüÊÄß„ÇíÈáçË¶ñ„Åó„ÄÅÊÆµÈöéÁöÑ„Å´Êé°Áî®„Åß„Åç„ÇãË®≠Ë®à„ÅåÁâπÂæ¥„Åß„Åô„ÄÇ„É™„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Éá„Éº„Çø„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ',
        metadata: { category: 'frontend', framework: 'Vue' }
      },
      {
        doc_id: 'test3',
        text: 'Express.js „ÅØ„ÄÅNode.jsÂêë„Åë„ÅÆËªΩÈáè„ÅßÊüîËªü„Å™Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„Åß„Åô„ÄÇREST API„ÅÆÊßãÁØâ„ÇÑWeb„Çµ„Éº„Éê„Éº„ÅÆÂÆüË£Ö„Å´Â∫É„Åè‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
        metadata: { category: 'backend', framework: 'Express' }
      }
    ];
    
    for (const doc of testDocs) {
      const result = await insertDocument(doc);
      console.log(`‚úÖ Inserted document: ${doc.doc_id}`);
      console.log(`   Chunks created: ${result.chunkCount}`);
      console.log(`   Total tokens: ${result.totalTokens}\n`);
    }
    
    // Test 2: Find similar documents
    console.log('\nüîç Test 2: Finding similar documents...\n');
    
    const queries = [
      { text: 'UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆJavaScript„É©„Ç§„Éñ„É©„É™', expected: 'React/Vue' },
      { text: 'Node.js„ÅÆWeb„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ', expected: 'Express' },
      { text: '„É™„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Éá„Éº„Çø„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞', expected: 'Vue' }
    ];
    
    for (const { text, expected } of queries) {
      console.log(`Query: "${text}"`);
      console.log(`Expected match: ${expected}\n`);
      
      const results = await findSimilarDocuments({
        text: text,
        top_k: 2
      });
      
      results.results.forEach((doc, i) => {
        console.log(`  ${i + 1}. Document: ${doc.doc_id}`);
        console.log(`     Similarity: ${(doc.score * 100).toFixed(1)}%`);
        // console.log(`     Metadata: ${JSON.stringify(doc.metadata)}`);
        console.log(`     Text: ${doc.text.substring(0, 80)}...`);
      });
      console.log('');
    }
    
    // Test 3: Delete document
    console.log('\nüóëÔ∏è  Test 3: Deleting a document...\n');
    const deleteResult = await deleteDocument({ doc_id: 'test1' });
    console.log(`‚úÖ Deleted document: test1`);
    console.log(`   Chunks removed: ${deleteResult.deletedChunks}\n`);
    
    // Verify deletion
    console.log('üîç Verifying deletion...\n');
    const verifyResults = await findSimilarDocuments({
      text: 'React „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà',
      top_k: 3
    });
    
    console.log(`Documents found: ${verifyResults.results.length}`);
    verifyResults.results.forEach(doc => {
      console.log(`  - ${doc.doc_id} (should not be test1)`);
    });
    
    // Cleanup
    console.log('\nüßπ Cleaning up test data...\n');
    await deleteDocument({ doc_id: 'test2' });
    await deleteDocument({ doc_id: 'test3' });
    console.log('‚úÖ Cleanup complete');
    
    console.log('\n‚ú® All tests passed successfully!\n');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    console.error(error.stack);
  }
}

// Run the test
runDirectTest();